{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","calcWinnerline","winnerAllAray","i","push","winnerHorisontal","length","winnerLine","slice","winnerDiagonalLeft","winnerDiagonalRight","nextmove","state","end","count","youMove","className","clickHandler","event","playingFieldSquare","document","querySelectorAll","dataId","target","getAttribute","curentPlayingField","playingField","tempDataId","Number","classList","add","setState","winner","alert","move","line","field","resetApp","Array","fill","redField","greenField","yellowField","remove","appData","this","title_react","title","map","obect","key","data-id","onClick","description","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.460e2083.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playingField: Array(42).fill(null),\r\n      count: 0,\r\n      winner: '',\r\n      move: '',\r\n      end: false\r\n    };\r\n    // this.field = [\r\n    //   [0,  1,  2,  3,  4,  5,  6 ],\r\n    //   [7,  8,  9,  10, 11, 12, 13],\r\n    //   [14, 15, 16, 17, 18, 19, 20],\r\n    //   [21, 22, 23, 24, 25, 26, 27],\r\n    //   [28, 29, 30, 31, 32, 33, 34],\r\n    //   [35, 36, 37, 38, 39, 40, 41]\r\n    // ];\r\n    this.winnerLine = [];\r\n    this.winnerHorisontal = [0, 1, 2, 3, 7, 8, 9, 10, 14, 15, 16, 17, 21, 22, 23, 24, 28, 29, 30, 31, 35, 36, 37, 38];\r\n    this.winnerDiagonalLeft = [0, 1, 2, 3, 7, 8, 9, 10, 14, 15, 16, 17];\r\n    this.winnerDiagonalRight = [3, 4, 5, 6, 10, 11, 12, 13, 17, 18, 19, 20];\r\n    this.youMove = \"\"\r\n  }\r\n\r\n\r\n  calcWinnerline = () => {\r\n    let winnerAllAray = [];\r\n    for (let i = 0; i < 42; i++) {\r\n      winnerAllAray.push(i);\r\n    }\r\n    // horizontal lines\r\n    for (let i = 0; i < this.winnerHorisontal.length; i++) {\r\n      this.winnerLine.push(winnerAllAray.slice(this.winnerHorisontal[i], this.winnerHorisontal[i] + 4));\r\n    }\r\n\r\n    // vertical lines\r\n    for (let i = 0; i < winnerAllAray.length; i++) {\r\n      if (i + 21 < winnerAllAray.length) {\r\n        this.winnerLine.push([i, i + 7, i + 14, i + 21]);\r\n      }\r\n    }\r\n    // diagonal left \r\n    for (let i = 0; i < this.winnerDiagonalLeft.length; i++) {\r\n      this.winnerLine.push([this.winnerDiagonalLeft[i], this.winnerDiagonalLeft[i] + 8, this.winnerDiagonalLeft[i] + 16, this.winnerDiagonalLeft[i] + 24]);\r\n    }\r\n\r\n    // diagonal right\r\n    for (let i = 0; i < this.winnerDiagonalRight.length; i++) {\r\n      this.winnerLine.push([this.winnerDiagonalRight[i], this.winnerDiagonalRight[i] + 6, this.winnerDiagonalRight[i] + 12, this.winnerDiagonalRight[i] + 18])\r\n    }\r\n    this.nextmove();\r\n  }\r\n\r\n  nextmove = () => {\r\n    if (this.state.end === false) {\r\n      if (this.state.count % 2 === 0) {\r\n        this.youMove = <div className='yellow move'><p>yellow move</p></div>\r\n      } else {\r\n        this.youMove = <div className='green move'><p>green move</p></div>\r\n      }\r\n    } else (\r\n      this.youMove = ''\r\n    )\r\n  }\r\n\r\n  // static getDerivedStateFromProps(props, state) {\r\n  //   return {\r\n  //     playingField2: props.appData.playingField\r\n  //   }\r\n  // }\r\n\r\n  clickHandler = (event) => {\r\n    let playingFieldSquare = document.querySelectorAll('.playing-field__square')\r\n    if (this.state.end === false) {\r\n      let count = this.state.count;\r\n      let dataId = event.target.getAttribute('data-id');\r\n      let curentPlayingField = this.state.playingField;\r\n      if (curentPlayingField[dataId] === null) {\r\n\r\n        let tempDataId = Number(dataId)\r\n\r\n        // discs fall on the lower free row \r\n        let discInRow = 7\r\n        for (let i = tempDataId; i <= this.state.playingField.length; i = i + discInRow) {\r\n          if (this.state.playingField[tempDataId + discInRow] === null) {\r\n            tempDataId = i;\r\n          }\r\n        }\r\n\r\n        if (count % 2 === 0 && curentPlayingField[dataId] === null) {\r\n          curentPlayingField[tempDataId] = 'X';\r\n          playingFieldSquare[tempDataId].classList.add(\"bg-yellow\")\r\n        } else if (count % 2 !== 0 && curentPlayingField[dataId] === null) {\r\n          curentPlayingField[tempDataId] = 'O';\r\n          playingFieldSquare[tempDataId].classList.add(\"bg-green\")\r\n        }\r\n        this.setState({ count: count + 1 });\r\n        this.winner();\r\n      } else {\r\n        alert('field is occupied')\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  winner = () => {\r\n    let move = (this.state.count % 2 === 0) ? 'X' : 'O';\r\n    for (let i = 0; i < this.winnerLine.length; i++) {\r\n      let line = this.winnerLine[i];\r\n      if (this.state.playingField[line[0]] === move &&\r\n        this.state.playingField[line[1]] === move &&\r\n        this.state.playingField[line[2]] === move &&\r\n        this.state.playingField[line[3]] === move\r\n      ) {\r\n\r\n        if (move === 'X') {\r\n          move = \"yellow winner\"\r\n        } else {\r\n          move = \"green winner\"\r\n        }\r\n\r\n        let winner = <div className={move}><p>{move}</p></div>;\r\n        this.setState({ winner: winner });\r\n\r\n        let field = document.querySelectorAll('.playing-field__square');\r\n\r\n        for (let i = 0; i < line.length; i++) {\r\n          field[line[i]].classList.add(\"bg-red\");\r\n        }\r\n        this.setState({ end: true })\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  resetApp = () => {\r\n    this.setState({ playingField: Array(42).fill(null) });\r\n    this.setState({ count: 0 });\r\n    this.setState({ winner: '' });\r\n    this.setState({ end: false });\r\n    let redField = document.querySelectorAll('.bg-red');\r\n    let greenField = document.querySelectorAll('.bg-green');\r\n    let yellowField = document.querySelectorAll('.bg-yellow');\r\n    for (let i = 0; i < redField.length; i++) {\r\n      redField[i].classList.remove(\"bg-red\");\r\n    }\r\n    for (let i = 0; i < greenField.length; i++) {\r\n      greenField[i].classList.remove(\"bg-green\");\r\n    }\r\n    for (let i = 0; i < yellowField.length; i++) {\r\n      yellowField[i].classList.remove(\"bg-yellow\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let appData = this.props.appData;\r\n    this.calcWinnerline();\r\n    return (\r\n      <div className=\"connect-four\">\r\n        <h2>{appData.title_react}</h2>\r\n        <h1>{appData.title}</h1>\r\n        <div className=\"play-app\">\r\n          <div className=\"playing-field\">\r\n            {this.state.playingField.map((obect, i) => {\r\n              return (\r\n                <div key={'data-id' + i} data-id={i} className=\"playing-field__square\" onClick={this.clickHandler}>{obect}</div>\r\n              )\r\n            })}\r\n          </div>\r\n          <div className=\"play-informstions\">\r\n            <div className=\"reset\" onClick={this.resetApp}><p>Reset</p></div>\r\n            {this.state.winner}\r\n            {this.youMove}\r\n          </div>\r\n        </div>\r\n        <p className=\"description\">{appData.description}</p>\r\n        <div className=\"table\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet appData = {\r\ntitle_react: \"React Game\",\r\ntitle: \"Connect 4\",\r\ndescription: \"Connect Four is a two-player connection game in which the players first choose a color and then take turns dropping one colored disc from the top into a seven-column, six-row vertically suspended grid. The pieces fall straight down, occupying the lowest available space within the column. The objective of the game is to be the first to form a horizontal, vertical, or diagonal line of four of one's own discs.\"\r\n}\r\n\r\nReactDOM.render(<App  appData={appData}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}